What is git
-----------
Git is a distributed version control system (DVCS) used for tracking changes in code and collaborating with multiple developers efficiently. 
It was created by Linus Torvalds in 2005 for managing the development of the Linux kernel.

Key Features of Git:
------------------
Distributed System – Every developer gets a full copy of the repository, allowing offline work.
Branching & Merging – Allows developers to create separate branches for features, bug fixes, or experiments and merge them when ready.
Speed & Efficiency – Designed for high performance with fast commits, branching, and merging.
Security – Uses cryptographic hashing (SHA-1) to ensure integrity and prevent data loss.
Collaboration – Enables multiple developers to work on the same project without conflicts.
Rollback & History Tracking – Keeps a history of all changes, making it easy to revert to previous versions if needed.

Git vs GitHub: What’s the Difference?
Many people confuse Git and GitHub, but they are not the same! Here's a simple explanation:

🔹 Git → A tool for tracking changes in code on your computer. Think of it as a time machine that helps you go back to previous versions of your project.
🔹 GitHub → A website that stores your Git projects online. It makes it easy to share, collaborate, and manage your code with others.

below is list of some commands:
Git Config Command:
------------------
1. git --version 
2. git config --global user.name "Your Name"
3. git config --global user.email "YourEmail@gmail.com"
4. git config --global color.ui auto 
5. git config --global core.editor nano
6. git config --global alias.st status
7. git config --global --list

Initializing and Managing Repository 
-----------------------------------
1. git init: The git init command is used to create a new Git repository in a project. It sets up the necessary files and folders for Git to start tracking changes.
   command: git init 

2.  git clone: The git clone command is used to copy (download) a remote Git repository to your local machine. This allows you to work on an existing project.

    How to use git clone:
    a. find the repository URL(From Github, GitLab)
    b. open a terminal or command prompt 
    c. run the following command:
       command: git clone <repo url>

3. git remote -v: – View Remote Repositories
   The git remote -v command is used to list the remote repositories linked to your local Git project. This helps you see where your project is connected online (e.g., GitHub, GitLab, or Bitbucket).
   How to Use git remote -v?
   1. Open a terminal or command prompt
   2. Go to your git project folder:
      command: cd path/project
   3. Run the command:
      command: git remote -v

  Example output:
    origin  https://github.com/user/project.git (fetch)
    origin  https://github.com/user/project.git (push)

4.git remote add origin <repo_url> : Add a Remote Repository

The git remote add origin <repo_url> command is used to link your local Git repository to a remote repository (like GitHub, GitLab, or Bitbucket). This allows you to push your code online and collaborate with others.

 command: git remote add origin <repo_url>
 example: git remote add origin https://github.com/user/project.git
 note: verify the origin by git remote -v

5. git remote remove origin: Remove a Remote Repository
The git remote remove origin command is used to disconnect your local Git repository from a remote repository. This is helpful if you want to stop syncing with the current remote or switch to a different repository.

command: git remote remove origin
note:verify the origin by git remote -v 

6. git remote set-url origin <new_url> : Change the Remote URL
The git remote set-url origin <new_url> command is used to update the URL of an existing remote repository (usually the "origin" remote). This is helpful if the URL of the remote repository changes (for example, when you change the repository's location on GitHub or GitLab).

command: git remote set-url origin <new_url>
example: git remote set-url origin https://github.com/user/new-repo.git
note: verify the origin by git remote -v

Tracking & Staging Files
------------------------
1. git status - Check the status of the working directory
   The git status command is used to check the current state of your working directory and staging area. It helps you understand:
    ✅ Which files are tracked and untracked
    ✅ Which changes are staged for commit
    ✅ Which changes are not staged
    ✅ If your branch is up-to-date with the remote repository
    
     Summary of Git Status Messages
     ------------------------------

 ->    Status Message: Working tree clean
       Meaning: No changes to commit
       Solution: No action needed
 
 ->    Status Message: Untracked files
       Meaning: New files not tracked by git 
       Solution: Use git add <file> to track them
 
 ->    Status Message: Changes not staged for commit
       Meaning: Modified files, but not added to staging
       Solution: Use git add <file> to stage them
 
 ->    Status Message: Changes to be committed  
       Meaning: Files are staged and ready to commit
       Solution: Use git commit -m "message" to commit
 
 ->    Status Message: Your branch is ahead of 'origin'
       Meaning: Local commits are not pushed to remote
       Solution: git push origin <branch>
 
 ->    Status Message: Deleted files not staged
       Meaning: Files were deleted but not committed
       Solution: Use git rm <file> to confirm deletion  	
        
2. git add - Stage a specific files for commit
   The git add command is used to stage changes in Git. Before committing changes, you must add them to the staging area using git add.
   
   Why Use git add?
   ✅ It prepares files for committing.
   ✅ It allows selective commits (you don’t have to commit all changes).
   ✅ It tracks new, modified, and deleted files. 
   
   1. git add <file> - Stage a specific file for commit
      command : git add filename.txt
      command: git add file1.txt file2.txt - add multiple file

   2. git add . - Stage all the changes in the directory
      This stages all modified and new files in the directory.
      Warning: This also stages unintentional changes. Use git status before running this command.
 
   3. git add -A - Stage all files (tracked + untracked)
      This is similar to git add ., but also tracks deleted files.
   
   4. git add -u - This stages only modified & deleted files, ignoring new files.
 
  How to verify Added Files:
  command: git status
  
  🔹 Before git add:
   Changes not staged for commit:
   modified:  index.html
   new file:  style.css
 
  🔹 After git add . :
   Changes to be committed:
   modified:  index.html
   new file:  style.css


🔹 Unstage a File (Undo git add)

 If you accidentally added a file and want to remove it from staging:
 
  git restore --staged filename.txt

 or for all staged files:
  git restore --staged .

 This removes files from the staging area without deleting the changes.
   
3. git reset <file> - Unstage a file (move it back to working directory)
   The git reset <file> command is used to unstage a file that was added using git add. It removes the file from the staging area, but keeps your changes in the working directory.

🔹 Why Use git reset <file>?

✅ Undo git add without losing file changes.
✅ Fix mistakes if you staged the wrong file.
✅ Keep your work but remove it from the next commit.

🔹 Basic Usage
git reset <file>
This unstages the specific file but keeps your changes.

🔹 Example Scenarios

1️⃣  Unstage a Specific File

git add report.txt
git reset report.txt

🔹 Before git reset (git status output)

Changes to be committed:
  new file: report.txt

🔹 After git reset report.txt (git status output)

Changes not staged for commit:
  new file: report.txt

2️⃣ Unstage All Files

git reset - This unstages all staged files.

git reset <file>:	Unstages the file but keeps changes.
git restore --staged <file>:	Does the same as git reset <file>.
git reset --hard:	Removes all unstaged changes.
git restore <file>:	Discards unstaged changes.

🔹 When to Use git reset <file>?

✔️ If you staged a file by mistake.
✔️ If you want to modify the file before committing.
✔️ If you need to review changes before committing. 


Commit Changes
------ ------

1. git commit -m "Message" - Commit staged changes with a message
   The git commit -m "Message" command is used to save staged changes in Git. It creates a commit, which acts like a snapshot of your project at that point in time.

🔹 Why Use git commit?

✅ Saves changes in Git history.
✅ Helps track modifications over time.
✅ Enables collaboration with other developers.
✅ Creates a checkpoint to revert back if needed.

🔹 Basic Usage
command: git commit -m "Added a new feature"

✅ This creates a commit with the message "Added a new feature".

 How git commit Works

1️⃣  Modified Files (Not Staged)
If you modify a file (index.html), running git status shows:
Changes not staged for commit:
  modified: index.html

You must stage the file before committing:
  command: git add index.html

2️⃣  Commit Staged Changes
command: git commit -m "Updated index.html"

Now git status will show:
nothing to commit, working tree clean

✅ Your changes are now saved in Git history.

3️⃣  Commit All Staged Files
   command: git add .
   command: git commit -m "Updated multiple files"
✅ This commits all staged changes.


🔹 Writing Good Commit Messages

A good commit message should:
✔️ Be short and clear
✔️ Explain what changed
✔️ Use present tense (e.g., "Fix bug", not "Fixed bug")

Examples of Good Commit Messages
✅ "Fix login bug in authentication system"
✅ "Add dark mode toggle feature"
✅ "Update README with setup instructions"


2. git commit --amend -m "New Message" - Modify the last commit message:

The git commit --amend -m "New Message" command allows you to change the last commit message without creating a new commit. This is useful if you made a typo or want to provide a better description.

🔹 Why Use git commit --amend?

✅ Fix mistakes in the last commit message.
✅ Add missing changes without creating a new commit.
✅ Keep the commit history clean.

🔹 Adding New Changes to the Last Commit
   If you forgot to add a file before committing:

      command: git add missing_file.txt
      command: git commit --amend -m "Updated commit with missing file"
✅ This updates the commit to include the new file.

🔹 Important Notes

🚨 Do NOT amend a commit that has been pushed to a shared repository!
If the commit is already pushed, amending it creates a new commit hash, which can cause conflicts for others.

🔹 How to Fix an Amended Commit After Pushing?

If you already pushed the commit and amended it, you'll need to force-push:
 git push origin main --force

🚨 Warning: --force can overwrite others' work, so use it carefully.

3. git commit --amend --no-edit - Modify the last commit without changing the message
   The git commit --amend --no-edit command allows you to update the last commit without changing its message. This is useful when you need to add new changes to the last commit without modifying the commit message.

🔹 Why Use git commit --amend --no-edit?

✅ Add missing files to the last commit.
✅ Avoid creating unnecessary commits.
✅ Keep the commit history clean.

🔹 Example Use Cases

1️⃣  Add a Missing File to the Last Commit
If you forgot to include index.html in your last commit:

command: git add index.html
command: git commit --amend --no-edit


✅ This updates the last commit without changing the message.

2️⃣  Modify a File Without Creating a New Commit
If you made a small change to style.css and want to update the last commit:
git add style.css
git commit --amend --no-edit

✅ Now the last commit includes the style.css changes without creating a new commit 

🔹 Important Notes

🚨 Avoid using --amend on pushed commits unless you're sure.
If you've already pushed the commit, you'll need to force-push:

command: git push origin main --force
⚠️ Warning: --force can overwrite others' changes, so use it carefully.


🔹 3. Git Branching and Switching

1. git branch - List branches
 The git branch command is used to create, list, rename, and delete branches in Git. Branches allow developers to work on different features or bug fixes without affecting the main codebase.

  🔹 Basic Usage
   1️⃣  List All Branches
     commaand:  git branch
  ✅ Shows all local branches.
The current branch is marked with an asterisk (*).

🔹 Example output:
* main
  feature-login
  bugfix-header

To list remote branches, use:
command: git branch -r

To list both local and remote branches, use:
command: git branch -a

2. git branch <branch-name> - Create a new branch

The git branch <branch-name> command is used to create a new branch in Git. This allows you to work on a new feature or fix without affecting the main codebase.

🔹 How to Use git branch <branch-name>

1️⃣  Create a New Branch
 
 git branch feature-login

✅ This creates a new branch called feature-login, but does NOT switch to it.

3. git checkout <branch-name> - Switch to another branch

The git checkout <branch-name> command allows you to switch to an existing branch in Git. It moves your working directory to that branch, so you can work on different features without affecting the main branch.

🔹 How to Use git checkout <branch-name>

1️⃣  Switch to an Existing Branch
git checkout feature-login

✅ This moves you to the feature-login branch.

To verify your current branch, run:
command: git branch

The active branch is marked with an asterisk (*):
  main
* feature-login
  bugfix-header


4. git checkout -b <branch-name> - Create and switch to a new branch
The git checkout -b <branch-name> command creates a new branch and switches to it immediately. This is useful when starting a new feature or bug fix without affecting the main branch.

🔹 How to Use git checkout -b <branch-name>
1️⃣  Create and Switch to a New Branch
git checkout -b feature-login

✅ This does two things in one step:

Creates a new branch named feature-login.
Switches to feature-login.
To verify the switch, run:

command: git branch

  main
* feature-login  ✅ (Current branch)
  bugfix-header

5. git merge <branch-name> - Merge a branch into the current branch

The git merge <branch-name> command is used to combine changes from one branch into another. This is useful when you finish working on a feature branch and want to merge it back into the main branch.

🔹 How to Use git merge <branch-name>

1️⃣  Merge a Branch into the Current Branch
git checkout main     # Switch to the branch you want to merge into
git merge feature-login  # Merge 'feature-login' into 'main'

✅ This merges the feature-login branch into main.

To check if the merge was successful, run:

git log --oneline --graph --all

6. git branch -d <branch-name> - Delete a branch

git branch -d <branch-name>

is used to delete a local branch in Git.

Conditions for Deletion:
The branch must be fully merged into the current branch or its upstream branch.
If the branch has unmerged changes, Git will prevent deletion and show an error.

Force Delete (If Unmerged Changes Exist):
If you want to force delete a branch that has unmerged changes, use:
command: git branch -D <branch-name>
example: git branch -d feature-xyz

7. git branch -D <branch-name> - Force delete a branch
   The git branch -D <branch-name> command forcefully deletes a branch locally. This is useful when you no longer need a branch and want to remove it from your repository.

   command: git branch -D feature-branch

🔹 This deletes the branch named feature-branch.

🚀 When to Use?

After merging a branch (cleanup).
Discarding unwanted work (if changes are not needed).
Fixing mistakes (if a branch was created by accident).

⚠️ Important Notes

This only deletes the branch locally (not on GitHub or remote).
If the branch has unmerged changes, they will be lost permanently.


❌ Safer Alternative (-d instead of -D)
If you want to delete only if the branch is already merged, use:

commnad: git branch -d feature-branch

🔹 If the branch is not merged, Git will warn you instead of deleting it.

🗑️ Deleting a Remote Branch
If you want to delete a branch from the remote repository (e.g., GitHub), use:
command: git push origin --delete feature-branch

🔹 This removes the branch from GitHub/GitLab.

🔄 Example Workflow

1️⃣  Create and switch to a new branch:
 command: git checkout -b feature-test

2️⃣  Work on the branch and commit changes.
3️⃣  Merge it into main when done:

command: git checkout main
commnad: git merge feature-test

4️⃣  Now, delete the old branch:
command: git branch -D feature-test
✅ Branch is now deleted! 🚀

🔄 How to Restore a Deleted Git Branch?
If you accidentally deleted a branch using git branch -D <branch-name>, you can recover it as long as the commits were not permanently erased.


🛠 Method 1: Find and Restore Using git reflog (Best Method)

Even if a branch is deleted, Git keeps a log of all actions (called reflog).

🔹 Step 1: Find the Deleted Branch’s Last Commit

Run this command: git reflog

🔍 This shows a list of recent Git actions. Look for something like:
example: abc1234 HEAD@{5}: checkout: moving from feature-branch to main

🔹 Step 2: Restore the Branch
Once you find the commit hash (abc1234 in this case), recreate the branch:
command: git checkout -b feature-branch abc1234
✅ Your deleted branch is now restored!


Difference Between git log and git reflog:
Purpose:
 git log: Shows the commit history of a branch
 git reflog: Shows the history of all HEAD movements (including resets, checkouts, and reverts)

Scope:
 git log: Displays commits in the repository
 git reflog: Displays both commits and branch movements

Visibility:
 git log: Only reflects reachable commits in the branch
 git reflog: Includes even deleted or lost commits (until garbage collection)

Usage:
 git log: Used to view commit history and authorship
 git reflog: Used to recover lost commits or track changes to HEAD

Example:
  git log:git log --oneline --graph
  git reflog: git reflog

      ------------------------------
🔹 6. | Viewing & Searching History |
      ------------------------------
  1. git log - Show commit history

   The git log command shows the history of commits in a repository. It helps you track changes, see who made them, and view commit messages.

🛠 Basic Usage:

To see the commit history, run:
command: git log

This will display:
Commit hash (unique ID)
Author (who made the commit)
Date (when it was made)
Commit message

Example output:

commit a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0
Author: Yogesh Jaiman <yogesh@example.com>
Date:   Mon Feb 11 10:30:00 2025 +0530

    Fixed login issue

🔎 Useful Options for git log

1️⃣  Show One-Line Summaries
command:  git log --oneline

✅ Displays a short version with just commit hashes and messages:
a1b2c3d Fix login issue
b3d4e5f Add new dashboard
c6f7g8h Initial commit


2️⃣  Limit the Number of Commits
command: git log -3
✅ Shows only the last 3 commits.


3️⃣  Show Changes in Each Commit
command : git log -p
✅ Displays the actual code changes for each commit.


4️⃣  Filter by Author

command: git log --author="Yogesh"

5️⃣  Show Commits in a Graph
command: git log --graph --oneline --all --decorate

2. git show <commit-hash> - Show details of a specific commit
The git show <commit-hash> command displays detailed information about a specific commit, including:

✅ Commit metadata (author, date, message)
✅ File changes (added, modified, or deleted)
✅ Actual code differences (diff)

command: git show a1b2c3d4

📝 Breakdown
Commit metadata: Shows who made the commit and when.
Commit message: Describes the changes.
Diff section: Shows what was removed (-) and added (+).

🔎 Useful Options
1️⃣  Show Changes for a Specific File
command: git show a1b2c3d4 -- login.py
✅ Shows only the changes in login.py.

2️⃣  View Only the Commit Message
command: git show --quiet a1b2c3d4

✅ Hides file changes, showing only the commit message.

3️⃣  Show Changes in a Compact Format

command: git show --stat a1b2c3d4

✅ Displays a summary of modified files and lines changed.

3. git diff - Show differences between working directory and last commit:

The git diff command shows the differences between versions of files in your repository. Let’s go step by step with real-world examples.

the git diff command shows differences between:
✅ The working directory and the last commit
✅ Two commits
✅ Two branches
✅ A commit and a branch

1. Compare Unstaged Changes (Working Directory vs. Last Commit)
If you edit a file (app.py) but haven’t staged it yet, run:
command: git diff 

Example output:
diff --git a/app.py b/app.py
index 123abc..456def 100644
--- a/app.py
+++ b/app.py
@@ -5,7 +5,7 @@ def welcome():
     print("Hello, User!")
-    print("Welcome to our app!")
+    print("Welcome to our awesome app!")

📝 Explanation:

The red (-) line was removed.
The green (+) line was added.
This change is not yet staged.

2️⃣  Compare Staged Changes (Ready to Commit):

if you stage the changes using git add:
command: git add app.py

then run: 
command: git diff --staged
✅ Now, it shows the differences between staged files and the last commit.

3️⃣  Compare Two Commits
If you want to see what changed between two commits:
command: git diff a1b2c3d4 e5f6g7h8

Example output:
diff --git a/app.py b/app.py
index abc123..def456 100644
--- a/app.py
+++ b/app.py
@@ -1,5 +1,5 @@
 def welcome():
-    print("Hello, User!")
+    print("Hello, Guest!")


4️⃣  Compare Two Branches:
command: git diff main feature-branch

✅ Shows what’s different between feature-branch and main.

5️⃣  Compare a Commit and a Branch:
command: git diff a1b2c3d4 main

✅ Shows changes between commit a1b2c3d4 and the main branch.

6️⃣  Compare a Specific File:
If you only want to check app.py:

command: git diff main feature-branch -- app.py

✅ Shows changes in only app.py between main and feature-branch.

7️⃣  See Changes in a Side-by-Side Format:
command: git diff --word-diff

4. git blame <file> - Show who last edited each line of a file

The git blame command shows line-by-line changes in a file, along with:
✅ Who made each change
✅ When the change was made
✅ Which commit introduced the change

🛠 Basic Usage
git blame app.py

✅ This shows the history of changes for app.py.

📌 Example Output
a1b2c3d4 (Yogesh Jaiman 2025-02-11 10:00:00) def welcome():
e5f6g7h8 (John Doe     2025-02-12 14:15:30)     print("Hello, User!")
f9g0h1i2 (Alice Smith  2025-02-13 09:45:10)     print("Welcome to our app!")

📝 Breakdown
a1b2c3d4 → The commit that added or modified the line.
Yogesh Jaiman → The author of that commit.
2025-02-11 10:00:00 → The timestamp when the change was made.
print("Welcome to our app!") → The actual line of code.

🔎 Useful Options

1️⃣  Show Only a Specific Line Range:

command: git blame -L 5,10 app.py

✅ Shows only lines 5 to 10 of app.py.

2️⃣  Ignore Whitespace Changes:
command: git blame -w app.py

✅ Ignores minor formatting changes like spaces and tabs.

3️⃣  See Blame History from a Specific Commit
 command: git blame a1b2c3d4 -- app.py
✅ Shows blame starting from commit a1b2c3d4.

4️⃣  Show Commit Messages Alongside Blame:
command: git blame -e app.py
✅ Displays author email instead of name.


Undoing Changes:

1. git restore <file> : Discard local changes in a file

   The git restore command is used to discard changes in files and bring them back to their previous state. Let’s go step by step with examples.

   1️⃣  Discard Changes in a File (Undo Unstaged Changes)
      If you made some edits in a file (app.py) but haven’t staged them yet, you can restore the last committed version with:
      command: git restore app.py

    ✅ This undoes all changes in app.py and restores the last committed version.

    💡 Use Case: You accidentally made unwanted changes to a file and want to discard them.


  2️⃣  Discard All Unstaged Changes in the Repository:
     If you want to discard all changes in multiple files:
     command: git restore .
✅ This restores all files in the working directory to their last committed state.

⚠ Warning: This cannot be undone unless you have a backup or the changes are committed somewhere.

3️⃣  Restore a Staged File (Unstage Changes but Keep Edits):

If you already staged a file using git add but want to unstage it (without losing your edits):

command: git restore --staged app.py

✅ This removes the file from staging but keeps your changes.

💡 Use Case: You mistakenly staged a file but aren’t ready to commit it.

4️⃣  Restore a File to a Specific Commit

If you want to restore a file to an older commit version:

command: git restore --source a1b2c3d4 app.py
✅ This brings back the version of app.py from commit a1b2c3d4.


🚀 Summary of git restore Commands
Command: git restore <file>
Description: Discard unstaged changes in a file

Command: git restore .
Description: Discard all unstaged changes in the repo

Command: git restore --staged <file>
Description: Unstage a file but keep changes

Command: git restore --source <commit> <file>
Description: Restore a file from a specific commit

2. git reset - Undo Changes in Git 
   The git reset command is used to undo commits, unstage files, or remove changes from the working directory. Let’s break it down step by step.

1️⃣  git reset Without Any Flags (Unstage Files):

  command: git reset app.py

✅ This unstages app.py, meaning it removes it from the staging area (as if git add was never run).

💡 Use Case: You staged a file using git add, but now you don’t want to include it in the next commit.

2️⃣  git reset --soft <commit> (Keep Changes, Undo Commits)

  command: git reset --soft HEAD~1

✅ Moves the branch one commit back, but keeps all changes staged.

💡 Use Case: You committed too soon but want to modify files before re-committing.

3️⃣  git reset --mixed <commit> (Unstage Changes, Keep Files)

  command:git reset --mixed HEAD~1

✅ Moves the branch one commit back, removes changes from staging, but keeps files unchanged.

💡 Use Case: You committed changes but realized they shouldn’t have been staged yet.

4️⃣  git reset --hard <commit> (Undo Commits & Delete Changes):

  command: git reset --hard HEAD~1

✅ Moves the branch one commit back and deletes all changes in the working directory.

⚠ Dangerous! Changes are gone forever unless backed up.

💡 Use Case: You made a bad commit and want to completely remove all traces of it.

5️⃣  Reset to a Specific Commit:

   command: git reset --hard a1b2c3d4

✅ Moves the branch back to commit a1b2c3d4 and deletes all commits after it.

3. git clean -f - Remove untracked files

The git clean command is used to delete untracked files (files that are not staged or committed) from your working directory. This is useful when you want to clean up temporary or unnecessary files.

1️⃣  Basic Usage – Remove Untracked Files

  command : git clean -f

✅ This forcefully removes all untracked files.
⚠ Warning: This action is irreversible – deleted files cannot be recovered!

💡 Use Case: You created temporary files (*.log, *.tmp, etc.) and want to remove them.

2️⃣  Preview Before Deleting (-n Flag)

   command: git clean -n

✅ This shows which files will be deleted without actually deleting them.

💡 Use Case: Always check before running git clean -f to avoid accidental deletion.

3️⃣  Remove Untracked Directories (-d Flag):

   command: git clean -fd

4️⃣  Remove Only Specific File Types (-X & -x Flags):

   command: git clean -X - Removes ignored files (e.g., .gitignore files).
   command: git clean -x - Removes all untracked files, including ignored files.

Example: remove only Ignored Files:
 Command: git clean -fX

✅ Deletes files listed in .gitignore, but keeps other untracked files.

🛠 Example: Remove Everything, Including Ignored Files

command: git clean -fx
✅ Deletes all untracked files, including ignored ones.

⚠ Be careful! This is a destructive action.


Working with remote repositories: 
-----------------------------------

1. git pull origin <branch>: Fetch and merge changes from remote:

The git pull command is used to fetch the latest changes from a remote repository and merge them into your local branch.

1️⃣  Basic Usage

Command: git pull origin main

✅ This fetches the latest changes from the main branch of the remote (origin) and merges them into your local main branch.

💡 Use Case: When working in a team, use git pull to get the latest updates before making changes.

2️⃣  What Happens Internally?

git pull origin <branch> is equivalent to running these two commands:

1️⃣  Fetch latest changes from the remote repository

Command: git fetch origin

2️⃣  Merge the fetched changes into your current branch

Command: git merge origin/main

3️⃣  Handling Merge Conflicts

If there are conflicting changes, Git will show a merge conflict message. You must resolve the conflicts manually:

1. Open the affected file(s).
2. Edit the conflicting sections.
3. Stage the resolved files using git add <file>.
4. Complete the merge with git commit -m "Resolved merge conflict".

4️⃣  Fast-Forward vs. Merge Pull

Pull Type         Description
Fast-forward  -  If your local branch has no new commits, Git moves the pointer forward without a merge commit.
Merge pull    - If your local branch has diverged, Git creates a merge commit to combine changes.

5️⃣  Using --rebase Instead of Merge

To apply the remote changes on top of your local changes instead of merging:

command: git pull --rebase origin main

✅ This keeps a cleaner commit history by avoiding merge commits.

💡 Use Case: When working in a shared repository, use --rebase to keep changes linear.

2. git push origin <branch> - Push local changes to remote

 The git push command is used to upload local commits to a remote repository so others can access them.

1️⃣  Basic Usage

Command: git push origin main

✅ This pushes your local main branch to the remote repository (origin).

💡 Use Case: After making changes and committing them, use git push to share your work with others.

2️⃣  What Happens Internally?
1. Git checks if your local branch has new commits.
2. It uploads (pushes) those commits to the remote branch.
3. If there are no conflicts, the remote branch updates with your changes.

3️⃣  What If Someone Else Has Pushed Changes?

If the remote branch has new changes, Git will reject your push.
You'll see an error like this:

! [rejected] main -> main (fetch first)


Solution: Pull the latest changes first!
command: git pull origin main --rebase  # Fetch and reapply your changes
Command: git push origin main  # Now push again

4️⃣  Pushing a New Branch to Remote

If your branch doesn’t exist on the remote, create and push it:

Command: git push -u origin feature-branch

✅ The -u flag sets origin/feature-branch as the default remote branch for future pushes.

5️⃣  Force Push (Use With Caution!)

Command: git push --force origin main

✅ Overwrites the remote branch with your local version.
⚠ DANGER: This can delete others' changes if used incorrectly.

🗑️ git push origin --delete <branch> – Delete a Remote Branch

If you no longer need a branch on the remote repository, you can delete it using:

Command: git push origin --delete feature-branch

✅ This removes feature-branch from the remote repository (origin).

💡 Use Case: After merging a feature branch into main, delete the branch to keep the repo clean.

1️⃣  How It Works

1. Git removes the branch from the remote repo.
2. Other team members will no longer see the branch when they pull updates.
3. This does not delete the branch locally! (You must delete it separately.)

2️⃣  Delete the Local Branch Too

After deleting the remote branch, clean up your local repo:

Command: git branch -d feature-branch  # Delete the local branch

⚠ If the branch has unmerged changes, Git will warn you. To force delete:
Command: git branch -D feature-branch  # Force delete locally

3️⃣  Verify the Deletion

Check if the branch is still on the remote repo:
Command: git branch -r  # Lists remote branches

✅ If origin/feature-branch is missing, the deletion was successful!

Stashing Changes:
------------------
1. git stash – Temporarily Save Uncommitted Changes
The git stash command temporarily saves uncommitted changes without committing them, allowing you to switch branches or work on something else without losing progress.

1️⃣  Basic Usage:

command: git stash

✅ This stores all modified and staged files in a temporary stash and reverts your working directory to a clean state.

💡 Use Case: If you need to switch branches but have unfinished changes, use git stash to save them safely.

2️⃣  View Stashed Changes: 

command: git stash list

✅ Shows all saved stashes. Example output:

stash@{0}: WIP on main: a1b2c3d Fixed a bug
stash@{1}: WIP on feature-branch: e4f5g6 Updated UI


Each stash has an index (stash@{0}, stash@{1}) that can be used to apply or drop it later.

3️⃣  Restore Stashed Changes:

🛠 Option 1: Apply the Last Stash (Keep Stash)

command: git stash apply

✅ Restores the most recent stash but keeps it in the stash list.

♻ Option 2: Apply and Remove the Last Stash

Command: git stash pop

✅ Restores the most recent stash and deletes it from the stash list.

🎯 Option 3: Apply a Specific Stash

command: git stash apply stash@{1}

✅ Restores a specific stash without removing it.

4️⃣  Remove Stashes

🚮 Delete a Specific Stash
Command: git stash drop stash@{0}

✅ Removes only stash@{0} from the stash list.

🔥 Delete All Stashes

Command: git stash clear

✅ Permanently deletes all stashed changes.

5️⃣  Stash Untracked (New) Files
By default, git stash only saves tracked files. To include untracked files:

Command: git stash -u  # Stash untracked files
Command: git stash -a  # Stash all ignored and untracked files


